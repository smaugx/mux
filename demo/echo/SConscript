#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os
import sys

Import('env')
#env =  env.Clone()

echo_server_sources = ['echo_server.cc']
client_sources = ['client.cc']

project_dir  = env['MUX_DIR']

epoll_src_path = os.path.join(project_dir, 'epoll/src')
epoll_sources = []
for item in os.listdir(epoll_src_path):
    if item.endswith('.cc') or item.endswith('.cpp') or item.endswith('.cxx'):
        abs_item = os.path.join(epoll_src_path, item)
        epoll_sources.append(abs_item)

echo_server_sources.extend(epoll_sources)
client_sources.extend(epoll_sources)

transport_src_path = os.path.join(project_dir, 'transport/src')
transport_sources = []
for item in os.listdir(transport_src_path):
    if item.endswith('.cc') or item.endswith('.cpp') or item.endswith('.cxx'):
        abs_item = os.path.join(transport_src_path, item)
        transport_sources.append(abs_item)
echo_server_sources.extend(transport_sources)
client_sources.extend(transport_sources)


print(echo_server_sources)
print(client_sources)

bin_dir = os.path.join(project_dir, "sbuild/bin")

env.Program(target = os.path.join(bin_dir, "echo_server"),
        source  = echo_server_sources,
        CPPPATH = env['headers'],
        LIBPATH = env['libs'],
        LIBS    = ['pthread'],
        CCFLAGS = env['ccflags']
        )


env.Program(target = os.path.join(bin_dir, "echo_client"),
        source  = client_sources,
        CPPPATH = env['headers'],
        LIBPATH = env['libs'],
        LIBS    = ['pthread'],
        CCFLAGS = env['ccflags']
        )
